// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { SUPABASE_URL, SUPABASE_ANON_KEY } from '@/config';

// Enable verbose auth logging
const DEBUG_AUTH = true;

// Extract project reference from the URL
const getProjectRef = () => {
  try {
    const url = new URL(SUPABASE_URL);
    return url.hostname.split('.')[0];
  } catch {
    return 'unknown';
  }
};

const PROJECT_REF = getProjectRef();
const STORAGE_KEY = `sb-${PROJECT_REF}-auth-token`;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create the Supabase client with cookie-based persistence configuration
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_ANON_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storageKey: STORAGE_KEY,
      storage: {
        getItem: (key) => {
          try {
            const cookieValue = document.cookie
              .split('; ')
              .find((row) => row.startsWith(`${key}=`))
              ?.split('=')[1];
              
            if (DEBUG_AUTH) {
              console.log(`[AUTH] Reading cookie: ${key}`, cookieValue ? 'Found' : 'Not found');
            }
            
            return cookieValue ? decodeURIComponent(cookieValue) : null;
          } catch (e) {
            console.error('[AUTH] Error getting cookie:', e);
            return null;
          }
        },
        setItem: (key, value) => {
          try {
            const encodedValue = encodeURIComponent(value);
            document.cookie = `${key}=${encodedValue}; path=/; secure; SameSite=Lax; max-age=${60 * 60 * 24 * 7}`;
            
            if (DEBUG_AUTH) {
              console.log(`[AUTH] Cookie set: ${key} (expires in 7 days)`);
            }
          } catch (e) {
            console.error('[AUTH] Error setting cookie:', e);
          }
        },
        removeItem: (key) => {
          try {
            document.cookie = `${key}=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; secure; SameSite=Lax`;
            
            if (DEBUG_AUTH) {
              console.log(`[AUTH] Cookie removed: ${key}`);
            }
          } catch (e) {
            console.error('[AUTH] Error removing cookie:', e);
          }
        },
      },
      debug: DEBUG_AUTH
    },
    global: {
      headers: {
        'X-Client-Info': 'ugclive-frontend'
      }
    }
  }
);

// Diagnostic function to check auth state
export const diagnoseAuthState = async () => {
  try {
    console.log('[AUTH] Running auth diagnostic...');
    
    // Check for auth token in cookies
    const hasCookie = document.cookie
      .split('; ')
      .some(row => row.startsWith(`${STORAGE_KEY}=`));
    console.log('[AUTH] Token exists in cookies:', hasCookie);
    
    // Try to get current session
    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
    console.log('[AUTH] Current session:', sessionData?.session ? 'Valid' : 'None');
    if (sessionError) {
      console.error('[AUTH] Session error:', sessionError);
    }
    
    // Try to get current user
    const { data: userData, error: userError } = await supabase.auth.getUser();
    console.log('[AUTH] Current user:', userData?.user ? `${userData.user.email}` : 'None');
    if (userError) {
      console.error('[AUTH] User error:', userError);
    }
    
    // Log all auth-related cookies
    console.log('[AUTH] All auth cookies:');
    document.cookie.split('; ').forEach(cookie => {
      const [name, value] = cookie.split('=');
      if (name.includes('supabase') || name.includes('sb-') || name.includes('auth')) {
        console.log(`  ${name}: ${value ? `${value.substring(0, 20)}...` : 'empty'}`);
      }
    });
    
    return {
      hasToken: hasCookie,
      hasSession: !!sessionData?.session,
      hasUser: !!userData?.user,
      sessionError,
      userError,
      contextState: {
        user: userData?.user ? { email: userData.user.email, id: userData.user.id } : null,
        session: sessionData?.session ? { expires_at: sessionData.session.expires_at } : null
      }
    };
  } catch (error) {
    console.error('[AUTH] Diagnostic error:', error);
    return { error };
  }
};

// Enable realtime functionality
export const enableRealtimeForGeneratedVideos = async () => {
  try {
    await supabase
      .channel('generated_videos_changes')
      .subscribe((status) => {
        console.log('Realtime subscription status:', status);
      });
    console.log('Realtime subscription initialized for generated_videos');
  } catch (error) {
    console.error('Error enabling realtime:', error);
  }
};
